Coding Standart
	Code lay-out:
		- Indentation:
			use 4 spaces per indentation level (no mixing of tabs and spaces)
	
			continuation lines should be clearly visible (the 4 spces rule doesn't
			neccesarily, though.)
			e.g.: 
			(1)
				# Aligned with opening delimiter.
				foo = long_function_name(|var_one, var_two,
                         				 |var_three, var_four)

			(where as "|" is just there to show the continuation line)
			
			(2)
				# Hanging indents *may* be indented to other than 4 spaces.
				foo = long_function_name(
  				  var_one, var_two,
  				  var_three, var_four)

		- Maximum Line Length:
			all lines are limited to 80 characters

			flowing long blocks of text (e.g. comments or docstrings) are limited to
			72 characters

		- Line breaks concerning binary operators:
			It is strongly adviced to use the line break before the binaray
			operator, because that way it is easier to see which items belong
			to which operator.
			e.g.:
				# Easy to match operators with operands
				income = (gross_wages
         				 + taxable_interest
         				 + (dividends - qualified_dividends)
         				 - ira_deduction
         				 - student_loan_interest)
		
		- Blank Lines:
			surround top-level funtions and class defintions with two blank lines
			
			surround method defintions inside a class with a single blank line

			extra blank lines may be used, though sparingly, to indicate logical
			sections:
				for groups of functions, meaning surround the group with two
				lines instead of the usuall resulting one line

				in functions to achive greater structure and readability

		- Comments:
			should always be written above the object (e.g. function, class, and so 			on) they describe

	Whitespaces:
		- avoid them:
			immediatley after an opening paranthesis, or befor a closing paranthesis
			e.g.:
				Yes: spam(ham[1], {eggs: 2})
				No:  spam( ham[ 1 ], { eggs: 2 } )	
			
			immediatley before a comma, semicolon or colon
			(rule doesn't aply for colons in slice-expressions, since it acts as 
			as binary operator)

			inbetween a trailing comma and the closing paranthesis	

			immediately before the opening paranthesis that start the argument list
			of a function call	

			immediately before the opening paranthesis that starts an indexing or 				slicing

		- use them:
			surounding binary opperators with one whitespace on each side
			e.g.: assignment (=), augmented assignment (+=, -= etc.), comparisons 				(==, <, >, !=, <>, <=, >=, in, not in, is, is not), Booleans (and, or, 				not,), Slicing(:)
			(however consider, that some operators may have other uses where they
			are not considerd as binary operators
			e.g.: "=" when indicating a keyword argument or default parameter,
			":" when used as it's ususaly colon functions)

			surounding the "->" concerning funtion annotations

			when using inline comments, seperate it by at least 2 spaces from the
			statement
		
			after a comma, semicolon, colon

	Comments:
		should be complete sentences

		should be written in english

		should always start with a letter
		
		should always explain what the object they describe does as short as possible
		but still understandable by everyone

		when writing block comments, consider using paragraphs to structure your comments

	Naming Conventions:
		names should be in the "mixedCase" standart
		e.g.: nameOfFunction

		all names except class names start with a lowercase letter

		when using acronyms in names, write every letter in uppercase
		e.g.: errorInTCPServer

		don't use "ö","ä","ü", instead use "oe", "ae", "ue"
			 	
			
